package Coordinator;

import java.util.ArrayList;

/**
 * Created by ohlbach on 12.09.2018.<br/>
 * A ChangeBlock is generated by CentralData. It contains the changes (unit clauses and ID_Implications) since
 * the last processing of the incoming information.
 * A ChangeBlock can be accessed by the Solvers to update their internal data structures.
 */
public class ChangeBlock {
    private ArrayList<Integer> oneLiteralClauses = null;
    private ArrayList<int[]>   twoLiteralClauses = null;
    private ArrayList<int[]>   equivalences = null;

    /** adds a new unit clause.
     * Previously inserted ID_Implications are reduced by the new unit clause.
     *
     * @param literal a derived unit clause
     */
    public void addOneLiteralClause(int literal) {
        if(oneLiteralClauses == null) {oneLiteralClauses = new ArrayList<>();}
        assert !oneLiteralClauses.contains(literal) && !oneLiteralClauses.contains(-literal);
        oneLiteralClauses.add(literal);}

    public void addTwoLiteralClause(int literal1, int literal2) {
        if(twoLiteralClauses == null) {twoLiteralClauses = new ArrayList<>();}
        twoLiteralClauses.add(new int[]{literal1,literal2});}

    public void addEquivalences(int representative, int literal) {
        if(equivalences != null) {equivalences = new ArrayList<>();}
        equivalences.add(new int[]{representative,literal});}

    public boolean isEmpty() {
        return ((oneLiteralClauses == null) | oneLiteralClauses.isEmpty()) &&
                ((twoLiteralClauses ==null) | twoLiteralClauses.isEmpty()) &&
                ((equivalences ==null) | equivalences.isEmpty());}



    /** gets all unit clauses.
     * The list MUST NOT be changed, because it may be shared by several threads
     *
     * @return the unit clauses.
     */
    public ArrayList<Integer> getOneLiteralClauses() {return oneLiteralClauses;}

    /** gets all ID_Implications.
     * The list MUST NOT be changed, because it may be shared by several threads
     *
     * @return the ID_Implications.
     */
    public ArrayList<int[]> getTwoLiteralClauses() {return twoLiteralClauses;}

    /** gets all equivalences [representative,literal]
      * The list MUST NOT be changed, because it may be shared by several threads
     *
     * @return the equaivalences.
     */
    public ArrayList<int[]> getEquivalences() {return equivalences;}

    /** generates a String representation of the block.
     *
     * @return a String representation of the block.
     */
    public String toString() {
        StringBuilder st = new StringBuilder();
        if(oneLiteralClauses != null) {st.append("Units: ").append(oneLiteralClauses.toString()).append("\n");}
        if(twoLiteralClauses != null) {
            for(int[] clause : twoLiteralClauses) {
                st.append(""+clause[0]+ ","+clause[1]+"\n");}}
        return st.toString();}

}
