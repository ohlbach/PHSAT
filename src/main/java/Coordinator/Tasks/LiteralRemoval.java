package Coordinator.Tasks;

import Datastructures.Results.Result;
import Management.Monitor;

import java.util.ArrayList;
import java.util.function.BiFunction;

/** It removes a literal from a clause
 *  This task can be generated by an external processor which has different data structures
 */
public class LiteralRemoval extends Task {
    private String clauseId;
    private int literal;
    BiFunction<String,Integer,Result> handler;

    /** constructs a LiteralRemoval task
     *
     * @param clauseId  of the clause from which the literal is to be removed
     * @param literal   the literal to be removed
     * @param handler which has to do the removal
     */
    public LiteralRemoval(String clauseId, int literal, Monitor monitor, String sourceId, BiFunction<String,Integer,Result> handler) {
        super(6,monitor,sourceId);
        this.clauseId = clauseId;
        this.literal  = literal;
        this.handler = handler;}

    /** calls the processor's processLiteralRemoval method
     *
     * @return the result of the processLiteralRemoval method
     */
    public Result execute() {
        super.execute();
        return handler.apply(clauseId,literal);}

    /** If the literal has become true/false already, nothing has to be done
     *
     * @param trueLiteral a true literal
     * @param tasks   for adding new tasks
     * @return false
     */
    public boolean makeTrue(int trueLiteral, ArrayList<Task> tasks) {
        if(Math.abs(literal) == Math.abs(trueLiteral)) {ignore = true;}
        return false;}

    public String toString() {
        return "Task: Remove literal " + literal + " from clause " + clauseId;}
}
