package Datastructures.Statistics;

import Coordinator.Processor;
import Datastructures.Clauses.Clause;
import Datastructures.Literals.CLiteral;
import Datastructures.Results.Unsatisfiable;
import com.sun.org.glassfish.gmbal.Description;

import java.util.function.BiConsumer;
import java.util.function.Consumer;

/** The statistics objects of this class collect information typically generated by the simplifications when tasks are executed.
 * The class can be subclassed to add more statistics.
 *
 * Created by ohlbach on 24.10.2018.
 */
public class DataStatistics extends Statistic {

    static {Statistic.statisticsClasses.add(DataStatistics.class);}

    /** constructs a new Statistics object which observes in particular the simplifications when task are executed.
     *
     * @param processor for which the statistics is collected.
     */
    public DataStatistics(Processor processor) {
        super(processor);}

    @Description("number of literal removals in a clause")
    public int CLS_LiteralRemovals        = 0;
    @Description("number of replacements of a literal by a representative in an equivalence class in a clause")
    public int CLS_LiteralReplacements    = 0;
    @Description("number of clauses removed from the clause list")
    public int CLS_ClauseRemovals         = 0;
    @Description("number of pure literals detected")
    public int CLS_Purities               = 0;
    @Description("number of true literals derived in the ImplicationDAG")
    public int IDG_TrueLiterals           = 0;
    @Description("number of implications inserted into the ImplicationDAG")
    public int IDG_Implications           = 0;
    @Description("number of equivalences detected in the ImplicationDAG")
    public int IDG_Equivalences           = 0;
    @Description("number of true literals discovered in the Disjointness classes")
    public int DIS_TrueLiterals           = 0;
    @Description("number of contradictions discovered in the Disjointness classes")
    public int DIS_Unsatisfiabilities     = 0;
    @Description("number of disjointnesses")
    public int DIS_Disjointnesses         = 0;
    @Description("number of true literals derived in the equivalence classes")
    public int EQV_TrueLiterals           = 0;
    @Description("number of contradictions discovered in the equivalence classes")
    public int EQV_Unsatisfiabilities     = 0;
    @Description("number clauses subsumed by new or shortened clauses")
    public int TSK_subsumed               = 0;
    @Description("number literals removed by replacement resolution with new or shortened clauses")
    public int TSK_resolved               = 0;





    private Consumer<CLiteral>               CLS_literalRemovalObserver = (cLiteral -> ++CLS_LiteralRemovals);
    private BiConsumer<CLiteral,Boolean> CLS_literalReplacementObserver = ((cLiteral, b) -> ++CLS_LiteralReplacements);
    private Consumer<Clause>                  CLS_clauseRemovalObserver = (cLiteral -> ++CLS_ClauseRemovals);
    private Consumer<Integer>                   IDG_trueLiteralObserver = (cLiteral -> ++IDG_TrueLiterals);
    private BiConsumer<Integer,Integer>         IDG_implicationObserver = ((from,to) -> ++IDG_Implications);
    private Consumer<int[]>                     IDG_equivalenceObserver = (eqv -> IDG_Equivalences += eqv.length);
    private Consumer<Integer>                   DIS_TrueLiteralObserver = (literal -> ++DIS_TrueLiterals);
    private Consumer<Unsatisfiable>        DIS_UnsatisfiabilityObserver = (literal -> ++DIS_Unsatisfiabilities);
    private Consumer<Clause>                   DIS_DisjointnessObserver = (literal -> ++DIS_Disjointnesses);
    private Consumer<Unsatisfiable>        EQV_UnsatisfiabilityObserver = (literal -> ++EQV_Unsatisfiabilities);
    private Consumer<Integer>                   EQV_TrueLiteralObserver = (literal -> ++EQV_TrueLiterals);

    public void addStatisticsObservers() {
        processor.clauses.addLiteralRemovalObserver       (CLS_literalRemovalObserver);
        processor.clauses.addLiteralReplacementObserver   (CLS_literalReplacementObserver);
        processor.clauses.addClauseRemovalObserver        (CLS_clauseRemovalObserver);
        processor.implicationDAG.addTrueLiteralObserver   (IDG_trueLiteralObserver);
        processor.implicationDAG.addImplicationObserver   (IDG_implicationObserver);
        processor.implicationDAG.addEquivalenceObserver   (IDG_equivalenceObserver);
        if(processor.disjointnesses != null) {
            processor.disjointnesses.addTrueLiteralObserver   (DIS_TrueLiteralObserver);
            processor.disjointnesses.addUnsatisfiabilityObserver(DIS_UnsatisfiabilityObserver);
            processor.disjointnesses.addDisjointnessObserver  (DIS_DisjointnessObserver);}
        if(processor.equivalences != null) {
            processor.equivalences.addUnsatisfiabilityObserver(EQV_UnsatisfiabilityObserver);
            processor.equivalences.addTrueLiteralObserver     (EQV_TrueLiteralObserver);}
    }

    public void removeStatisticsObservers() {
        processor.clauses.removeLiteralRemovalObserver       (CLS_literalRemovalObserver);
        processor.clauses.removeLiteralReplacementObserver   (CLS_literalReplacementObserver);
        processor.clauses.removeClauseRemovalObserver        (CLS_clauseRemovalObserver);
        processor.implicationDAG.removeTrueLiteralObserver   (IDG_trueLiteralObserver);
        processor.implicationDAG.removeImplicationObserver   (IDG_implicationObserver);
        processor.implicationDAG.removeEquivalenceObserver   (IDG_equivalenceObserver);
        if(processor.disjointnesses != null) {
            processor.disjointnesses.removeTrueLiteralObserver   (DIS_TrueLiteralObserver);
            processor.disjointnesses.removeUnsatisfiabilityObserver(DIS_UnsatisfiabilityObserver);
            processor.disjointnesses.removeDisjointnessObserver  (DIS_DisjointnessObserver);}
        if(processor.equivalences != null) {
            processor.equivalences.removeUnsatisfiabilityObserver(EQV_UnsatisfiabilityObserver);
            processor.equivalences.removeTrueLiteralObserver     (EQV_TrueLiteralObserver);}}



}
